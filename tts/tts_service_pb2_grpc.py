# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

# 使用相对导入
# from . import tts_service_pb2 as tts__service__pb2
# import tts_service_pb2 as tts__service__pb2
from tts import tts_service_pb2 as tts__service__pb2

class TTSServiceStub(object):
    """TTS服务定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/tts_service.TTSService/HealthCheck',
                request_serializer=tts__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=tts__service__pb2.HealthCheckResponse.FromString,
                )
        self.ProcessTTS = channel.unary_stream(
                '/tts_service.TTSService/ProcessTTS',
                request_serializer=tts__service__pb2.TTSServiceRequest.SerializeToString,
                response_deserializer=tts__service__pb2.TTSServiceResponse.FromString,
                )
        self.StreamTTS = channel.stream_stream(
                '/tts_service.TTSService/StreamTTS',
                request_serializer=tts__service__pb2.TTSServiceRequest.SerializeToString,
                response_deserializer=tts__service__pb2.TTSServiceResponse.FromString,
                )


class TTSServiceServicer(object):
    """TTS服务定义
    """

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessTTS(self, request, context):
        """发送TTS请求，接收音频流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTTS(self, request_iterator, context):
        """双向流：发送请求流，接收响应流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TTSServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=tts__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=tts__service__pb2.HealthCheckResponse.SerializeToString,
            ),
            'ProcessTTS': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessTTS,
                    request_deserializer=tts__service__pb2.TTSServiceRequest.FromString,
                    response_serializer=tts__service__pb2.TTSServiceResponse.SerializeToString,
            ),
            'StreamTTS': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamTTS,
                    request_deserializer=tts__service__pb2.TTSServiceRequest.FromString,
                    response_serializer=tts__service__pb2.TTSServiceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tts_service.TTSService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TTSService(object):
    """TTS服务定义
    """

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tts_service.TTSService/HealthCheck',
            tts__service__pb2.HealthCheckRequest.SerializeToString,
            tts__service__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessTTS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tts_service.TTSService/ProcessTTS',
            tts__service__pb2.TTSServiceRequest.SerializeToString,
            tts__service__pb2.TTSServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTTS(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/tts_service.TTSService/StreamTTS',
            tts__service__pb2.TTSServiceRequest.SerializeToString,
            tts__service__pb2.TTSServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
